// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/go-loggregator/loggregator_v2"
)

type FakeBatcher struct {
	SendDurationStub        func(name string, value time.Duration) error
	sendDurationMutex       sync.RWMutex
	sendDurationArgsForCall []struct {
		name  string
		value time.Duration
	}
	sendDurationReturns struct {
		result1 error
	}
	sendDurationReturnsOnCall map[int]struct {
		result1 error
	}
	SendMebiBytesStub        func(name string, value int) error
	sendMebiBytesMutex       sync.RWMutex
	sendMebiBytesArgsForCall []struct {
		name  string
		value int
	}
	sendMebiBytesReturns struct {
		result1 error
	}
	sendMebiBytesReturnsOnCall map[int]struct {
		result1 error
	}
	SendMetricStub        func(name string, value int) error
	sendMetricMutex       sync.RWMutex
	sendMetricArgsForCall []struct {
		name  string
		value int
	}
	sendMetricReturns struct {
		result1 error
	}
	sendMetricReturnsOnCall map[int]struct {
		result1 error
	}
	SendBytesPerSecondStub        func(name string, value float64) error
	sendBytesPerSecondMutex       sync.RWMutex
	sendBytesPerSecondArgsForCall []struct {
		name  string
		value float64
	}
	sendBytesPerSecondReturns struct {
		result1 error
	}
	sendBytesPerSecondReturnsOnCall map[int]struct {
		result1 error
	}
	SendRequestsPerSecondStub        func(name string, value float64) error
	sendRequestsPerSecondMutex       sync.RWMutex
	sendRequestsPerSecondArgsForCall []struct {
		name  string
		value float64
	}
	sendRequestsPerSecondReturns struct {
		result1 error
	}
	sendRequestsPerSecondReturnsOnCall map[int]struct {
		result1 error
	}
	SendStub        func() error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct{}
	sendReturns     struct {
		result1 error
	}
	sendReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatcher) SendDuration(name string, value time.Duration) error {
	fake.sendDurationMutex.Lock()
	ret, specificReturn := fake.sendDurationReturnsOnCall[len(fake.sendDurationArgsForCall)]
	fake.sendDurationArgsForCall = append(fake.sendDurationArgsForCall, struct {
		name  string
		value time.Duration
	}{name, value})
	fake.recordInvocation("SendDuration", []interface{}{name, value})
	fake.sendDurationMutex.Unlock()
	if fake.SendDurationStub != nil {
		return fake.SendDurationStub(name, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendDurationReturns.result1
}

func (fake *FakeBatcher) SendDurationCallCount() int {
	fake.sendDurationMutex.RLock()
	defer fake.sendDurationMutex.RUnlock()
	return len(fake.sendDurationArgsForCall)
}

func (fake *FakeBatcher) SendDurationArgsForCall(i int) (string, time.Duration) {
	fake.sendDurationMutex.RLock()
	defer fake.sendDurationMutex.RUnlock()
	return fake.sendDurationArgsForCall[i].name, fake.sendDurationArgsForCall[i].value
}

func (fake *FakeBatcher) SendDurationReturns(result1 error) {
	fake.SendDurationStub = nil
	fake.sendDurationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendDurationReturnsOnCall(i int, result1 error) {
	fake.SendDurationStub = nil
	if fake.sendDurationReturnsOnCall == nil {
		fake.sendDurationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendDurationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendMebiBytes(name string, value int) error {
	fake.sendMebiBytesMutex.Lock()
	ret, specificReturn := fake.sendMebiBytesReturnsOnCall[len(fake.sendMebiBytesArgsForCall)]
	fake.sendMebiBytesArgsForCall = append(fake.sendMebiBytesArgsForCall, struct {
		name  string
		value int
	}{name, value})
	fake.recordInvocation("SendMebiBytes", []interface{}{name, value})
	fake.sendMebiBytesMutex.Unlock()
	if fake.SendMebiBytesStub != nil {
		return fake.SendMebiBytesStub(name, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendMebiBytesReturns.result1
}

func (fake *FakeBatcher) SendMebiBytesCallCount() int {
	fake.sendMebiBytesMutex.RLock()
	defer fake.sendMebiBytesMutex.RUnlock()
	return len(fake.sendMebiBytesArgsForCall)
}

func (fake *FakeBatcher) SendMebiBytesArgsForCall(i int) (string, int) {
	fake.sendMebiBytesMutex.RLock()
	defer fake.sendMebiBytesMutex.RUnlock()
	return fake.sendMebiBytesArgsForCall[i].name, fake.sendMebiBytesArgsForCall[i].value
}

func (fake *FakeBatcher) SendMebiBytesReturns(result1 error) {
	fake.SendMebiBytesStub = nil
	fake.sendMebiBytesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendMebiBytesReturnsOnCall(i int, result1 error) {
	fake.SendMebiBytesStub = nil
	if fake.sendMebiBytesReturnsOnCall == nil {
		fake.sendMebiBytesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendMebiBytesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendMetric(name string, value int) error {
	fake.sendMetricMutex.Lock()
	ret, specificReturn := fake.sendMetricReturnsOnCall[len(fake.sendMetricArgsForCall)]
	fake.sendMetricArgsForCall = append(fake.sendMetricArgsForCall, struct {
		name  string
		value int
	}{name, value})
	fake.recordInvocation("SendMetric", []interface{}{name, value})
	fake.sendMetricMutex.Unlock()
	if fake.SendMetricStub != nil {
		return fake.SendMetricStub(name, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendMetricReturns.result1
}

func (fake *FakeBatcher) SendMetricCallCount() int {
	fake.sendMetricMutex.RLock()
	defer fake.sendMetricMutex.RUnlock()
	return len(fake.sendMetricArgsForCall)
}

func (fake *FakeBatcher) SendMetricArgsForCall(i int) (string, int) {
	fake.sendMetricMutex.RLock()
	defer fake.sendMetricMutex.RUnlock()
	return fake.sendMetricArgsForCall[i].name, fake.sendMetricArgsForCall[i].value
}

func (fake *FakeBatcher) SendMetricReturns(result1 error) {
	fake.SendMetricStub = nil
	fake.sendMetricReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendMetricReturnsOnCall(i int, result1 error) {
	fake.SendMetricStub = nil
	if fake.sendMetricReturnsOnCall == nil {
		fake.sendMetricReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendMetricReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendBytesPerSecond(name string, value float64) error {
	fake.sendBytesPerSecondMutex.Lock()
	ret, specificReturn := fake.sendBytesPerSecondReturnsOnCall[len(fake.sendBytesPerSecondArgsForCall)]
	fake.sendBytesPerSecondArgsForCall = append(fake.sendBytesPerSecondArgsForCall, struct {
		name  string
		value float64
	}{name, value})
	fake.recordInvocation("SendBytesPerSecond", []interface{}{name, value})
	fake.sendBytesPerSecondMutex.Unlock()
	if fake.SendBytesPerSecondStub != nil {
		return fake.SendBytesPerSecondStub(name, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendBytesPerSecondReturns.result1
}

func (fake *FakeBatcher) SendBytesPerSecondCallCount() int {
	fake.sendBytesPerSecondMutex.RLock()
	defer fake.sendBytesPerSecondMutex.RUnlock()
	return len(fake.sendBytesPerSecondArgsForCall)
}

func (fake *FakeBatcher) SendBytesPerSecondArgsForCall(i int) (string, float64) {
	fake.sendBytesPerSecondMutex.RLock()
	defer fake.sendBytesPerSecondMutex.RUnlock()
	return fake.sendBytesPerSecondArgsForCall[i].name, fake.sendBytesPerSecondArgsForCall[i].value
}

func (fake *FakeBatcher) SendBytesPerSecondReturns(result1 error) {
	fake.SendBytesPerSecondStub = nil
	fake.sendBytesPerSecondReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendBytesPerSecondReturnsOnCall(i int, result1 error) {
	fake.SendBytesPerSecondStub = nil
	if fake.sendBytesPerSecondReturnsOnCall == nil {
		fake.sendBytesPerSecondReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendBytesPerSecondReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendRequestsPerSecond(name string, value float64) error {
	fake.sendRequestsPerSecondMutex.Lock()
	ret, specificReturn := fake.sendRequestsPerSecondReturnsOnCall[len(fake.sendRequestsPerSecondArgsForCall)]
	fake.sendRequestsPerSecondArgsForCall = append(fake.sendRequestsPerSecondArgsForCall, struct {
		name  string
		value float64
	}{name, value})
	fake.recordInvocation("SendRequestsPerSecond", []interface{}{name, value})
	fake.sendRequestsPerSecondMutex.Unlock()
	if fake.SendRequestsPerSecondStub != nil {
		return fake.SendRequestsPerSecondStub(name, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendRequestsPerSecondReturns.result1
}

func (fake *FakeBatcher) SendRequestsPerSecondCallCount() int {
	fake.sendRequestsPerSecondMutex.RLock()
	defer fake.sendRequestsPerSecondMutex.RUnlock()
	return len(fake.sendRequestsPerSecondArgsForCall)
}

func (fake *FakeBatcher) SendRequestsPerSecondArgsForCall(i int) (string, float64) {
	fake.sendRequestsPerSecondMutex.RLock()
	defer fake.sendRequestsPerSecondMutex.RUnlock()
	return fake.sendRequestsPerSecondArgsForCall[i].name, fake.sendRequestsPerSecondArgsForCall[i].value
}

func (fake *FakeBatcher) SendRequestsPerSecondReturns(result1 error) {
	fake.SendRequestsPerSecondStub = nil
	fake.sendRequestsPerSecondReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendRequestsPerSecondReturnsOnCall(i int, result1 error) {
	fake.SendRequestsPerSecondStub = nil
	if fake.sendRequestsPerSecondReturnsOnCall == nil {
		fake.sendRequestsPerSecondReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendRequestsPerSecondReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) Send() error {
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct{}{})
	fake.recordInvocation("Send", []interface{}{})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		return fake.SendStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendReturns.result1
}

func (fake *FakeBatcher) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeBatcher) SendReturns(result1 error) {
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) SendReturnsOnCall(i int, result1 error) {
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendDurationMutex.RLock()
	defer fake.sendDurationMutex.RUnlock()
	fake.sendMebiBytesMutex.RLock()
	defer fake.sendMebiBytesMutex.RUnlock()
	fake.sendMetricMutex.RLock()
	defer fake.sendMetricMutex.RUnlock()
	fake.sendBytesPerSecondMutex.RLock()
	defer fake.sendBytesPerSecondMutex.RUnlock()
	fake.sendRequestsPerSecondMutex.RLock()
	defer fake.sendRequestsPerSecondMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loggregator_v2.Batcher = new(FakeBatcher)
